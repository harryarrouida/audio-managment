{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.dropUnusedDefinitions = void 0;\nconst graphql_1 = require(\"graphql\");\nfunction dropUnusedDefinitions(ast, operationName) {\n  const separated = (0, graphql_1.separateOperations)(ast)[operationName];\n  if (!separated) {\n    return ast;\n  }\n  return separated;\n}\nexports.dropUnusedDefinitions = dropUnusedDefinitions;","map":{"version":3,"names":["graphql_1","require","dropUnusedDefinitions","ast","operationName","separated","separateOperations","exports"],"sources":["C:\\Users\\Hamza Arrouida\\Desktop\\PROJECTS\\SNRT\\audio-managment-v2 [enhanced]\\node_modules\\@apollo\\utils.dropunuseddefinitions\\src\\index.ts"],"sourcesContent":["import { DocumentNode, separateOperations } from \"graphql\";\n\n// A GraphQL query may contain multiple named operations, with the operation to\n// use specified separately by the client. This transformation drops unused\n// operations from the query, as well as any fragment definitions that are not\n// referenced.  (In general we recommend that unused definitions are dropped on\n// the client before sending to the server to save bandwidth and parsing time.)\nexport function dropUnusedDefinitions(\n  ast: DocumentNode,\n  operationName: string,\n): DocumentNode {\n  const separated = separateOperations(ast)[operationName];\n  if (!separated) {\n    // If the given operationName isn't found, just make this whole transform a\n    // no-op instead of crashing.\n    return ast;\n  }\n  return separated;\n}\n"],"mappings":";;;;;;AAAA,MAAAA,SAAA,GAAAC,OAAA;AAOA,SAAgBC,qBAAqBA,CACnCC,GAAiB,EACjBC,aAAqB;EAErB,MAAMC,SAAS,GAAG,IAAAL,SAAA,CAAAM,kBAAkB,EAACH,GAAG,CAAC,CAACC,aAAa,CAAC;EACxD,IAAI,CAACC,SAAS,EAAE;IAGd,OAAOF,GAAG;;EAEZ,OAAOE,SAAS;AAClB;AAXAE,OAAA,CAAAL,qBAAA,GAAAA,qBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}