{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.schemaIsFederated = void 0;\nconst graphql_1 = require(\"graphql\");\nfunction schemaIsFederated(schema) {\n  const serviceType = schema.getType('_Service');\n  if (!(0, graphql_1.isObjectType)(serviceType)) {\n    return false;\n  }\n  const sdlField = serviceType.getFields().sdl;\n  if (!sdlField) {\n    return false;\n  }\n  const sdlFieldType = sdlField.type;\n  if (!(0, graphql_1.isScalarType)(sdlFieldType)) {\n    return false;\n  }\n  return sdlFieldType.name == 'String';\n}\nexports.schemaIsFederated = schemaIsFederated;","map":{"version":3,"names":["graphql_1","require","schemaIsFederated","schema","serviceType","getType","isObjectType","sdlField","getFields","sdl","sdlFieldType","type","isScalarType","name","exports"],"sources":["C:\\Users\\Hamza Arrouida\\Desktop\\PROJECTS\\SNRT\\audio-managment-v2 [enhanced]\\node_modules\\apollo-server-core\\src\\plugin\\schemaIsFederated.ts"],"sourcesContent":["import { GraphQLSchema, isObjectType, isScalarType } from 'graphql';\n\n// Returns true if it appears that the schema was returned from\n// @apollo/federation's buildFederatedSchema. This strategy avoids depending\n// explicitly on @apollo/federation or relying on something that might not\n// survive transformations like monkey-patching a boolean field onto the\n// schema.\n//\n// This is used for two things:\n// 1) Determining whether traces should be added to responses if requested\n//    with an HTTP header. If you want to include these traces even for\n//    non-federated schemas (when requested via header) you can use\n//    ApolloServerPluginInlineTrace yourself; if you want to never\n//    include these traces even for federated schemas you can use\n//    ApolloServerPluginInlineTraceDisabled.\n// 2) Determining whether schema-reporting should be allowed; federated\n//    services shouldn't be reporting schemas, and we accordingly throw if\n//    it's attempted.\nexport function schemaIsFederated(schema: GraphQLSchema): boolean {\n  const serviceType = schema.getType('_Service');\n  if (!isObjectType(serviceType)) {\n    return false;\n  }\n  const sdlField = serviceType.getFields().sdl;\n  if (!sdlField) {\n    return false;\n  }\n  const sdlFieldType = sdlField.type;\n  if (!isScalarType(sdlFieldType)) {\n    return false;\n  }\n  return sdlFieldType.name == 'String';\n}\n"],"mappings":";;;;;;AAAA,MAAAA,SAAA,GAAAC,OAAA;AAkBA,SAAgBC,iBAAiBA,CAACC,MAAqB;EACrD,MAAMC,WAAW,GAAGD,MAAM,CAACE,OAAO,CAAC,UAAU,CAAC;EAC9C,IAAI,CAAC,IAAAL,SAAA,CAAAM,YAAY,EAACF,WAAW,CAAC,EAAE;IAC9B,OAAO,KAAK;;EAEd,MAAMG,QAAQ,GAAGH,WAAW,CAACI,SAAS,EAAE,CAACC,GAAG;EAC5C,IAAI,CAACF,QAAQ,EAAE;IACb,OAAO,KAAK;;EAEd,MAAMG,YAAY,GAAGH,QAAQ,CAACI,IAAI;EAClC,IAAI,CAAC,IAAAX,SAAA,CAAAY,YAAY,EAACF,YAAY,CAAC,EAAE;IAC/B,OAAO,KAAK;;EAEd,OAAOA,YAAY,CAACG,IAAI,IAAI,QAAQ;AACtC;AAdAC,OAAA,CAAAZ,iBAAA,GAAAA,iBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}