{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});","map":{"version":3,"names":[],"sources":["C:\\Users\\Hamza Arrouida\\Desktop\\PROJECTS\\SNRT\\audio-managment-v2 [enhanced]\\node_modules\\apollo-server-core\\src\\plugin\\usageReporting\\options.ts"],"sourcesContent":["import type { GraphQLError, DocumentNode } from 'graphql';\nimport type {\n  GraphQLRequestContextDidResolveOperation,\n  GraphQLRequestContext,\n  GraphQLRequestContextWillSendResponse,\n} from 'apollo-server-types';\nimport type { Logger } from '@apollo/utils.logger';\nimport type { fetch, RequestAgent } from 'apollo-server-env';\nimport type { Trace } from 'apollo-reporting-protobuf';\n\nexport interface ApolloServerPluginUsageReportingOptions<TContext> {\n  //#region Configure exactly which data should be sent to Apollo.\n  /**\n   * By default, Apollo Server does not send the values of any GraphQL variables to Apollo's servers, because variable\n   * values often contain the private data of your app's users. If you'd like variable values to be included in traces, set this option.\n   * This option can take several forms:\n   * - { none: true }: don't send any variable values (DEFAULT)\n   * - { all: true}: send all variable values\n   * - { transform: ... }: a custom function for modifying variable values. Keys added by the custom function will\n   *    be removed, and keys removed will be added back with an empty value. For security reasons, if an error occurs within this function, all variable values will be replaced with `[PREDICATE_FUNCTION_ERROR]`.\n   * - { exceptNames: ... }: a case-sensitive list of names of variables whose values should not be sent to Apollo servers\n   * - { onlyNames: ... }: A case-sensitive list of names of variables whose values will be sent to Apollo servers\n   *\n   * Defaults to not sending any variable values if both this parameter and\n   * the deprecated `privateVariables` are not set. The report will\n   * indicate each private variable key whose value was redacted by { none: true } or { exceptNames: [...] }.\n   */\n  sendVariableValues?: VariableValueOptions;\n  /**\n   * By default, Apollo Server does not send the list of HTTP headers and values\n   * to Apollo's servers, as these headers may contain your users' private data.\n   * If you'd like this information included in traces, set this option. This\n   * option can take several forms:\n   *\n   * - { none: true } to drop all HTTP request headers (DEFAULT)\n   * - { all: true } to send the values of all HTTP request headers\n   * - { exceptNames: Array<String> } A case-insensitive list of names of HTTP\n   *     headers whose values should not be sent to Apollo servers\n   * - { onlyNames: Array<String> }: A case-insensitive list of names of HTTP\n   *   headers whose values will be sent to Apollo servers\n   *\n   * Unlike with sendVariableValues, names of dropped headers are not reported.\n   * The headers 'authorization', 'cookie', and 'set-cookie' are never reported.\n   */\n  sendHeaders?: SendValuesBaseOptions;\n  /**\n   * By default, all errors get reported to Apollo servers. You can specify\n   * a filter function to exclude specific errors from being reported by\n   * returning an explicit `null`, or you can mask certain details of the error\n   * by modifying it and returning the modified error.\n   */\n  rewriteError?: (err: GraphQLError) => GraphQLError | null;\n\n  // We should strongly consider changing the default to false in AS4.\n\n  /**\n   * This option allows you to choose if Apollo Server should calculate detailed\n   * per-field statistics for a particular request. It is only called for\n   * executable operations: operations which parse and validate properly and\n   * which do not have an unknown operation name. It is not called if an\n   * `includeRequest` hook is provided and returns false.\n   *\n   * You can either pass an async function or a number. The function receives a\n   * `GraphQLRequestContext`. (The effect of passing a number is described\n   * later.) Your function can return a boolean or a number; returning false is\n   * equivalent to returning 0 and returning true is equivalent to returning 1.\n   *\n   * Returning false (or 0) means that Apollo Server will only pay attention to\n   * overall properties of the operation, like what GraphQL operation is\n   * executing and how long the entire operation takes to execute, and not\n   * anything about field-by-field execution.\n   *\n   * If you return false (or 0), this operation *will* still contribute to most\n   * features of Studio, such as schema checks, the Operations page, and the\n   * \"referencing operations\" statistic on the Fields page, etc.\n   *\n   * If you return false (or 0), this operation will *not* contribute to the\n   * \"field executions\" statistic on the Fields page or to the execution timing\n   * hints optionally displayed in Studio Explorer or in vscode-graphql.\n   * Additionally, this operation will not produce a trace that can be viewed on\n   * the Traces section of the Operations page.\n   *\n   * Returning false (or 0) for some or all operations can improve your server's\n   * performance, as the overhead of calculating complete traces is not always\n   * negligible. This is especially the case if this server is an Apollo\n   * Gateway, as captured traces are transmitted from the subgraph to the\n   * Gateway in-band inside the actual GraphQL response.\n   *\n   * Returning a positive number means that Apollo Server will track each field\n   * execution and send Apollo Studio statistics on how many times each field\n   * was executed and what the per-field performance was. Apollo Server sends\n   * both a precise observed execution count and an estimated execution count.\n   * The former is calculated by counting each field execution as 1, and the\n   * latter is calculated by counting each field execution as the number\n   * returned from this hook, which can be thought of as a weight.\n   *\n   * Passing a number `x` (which should be between 0 and 1 inclusive) for\n   * `fieldLevelInstrumentation` is equivalent to passing the function `async ()\n   * => Math.random() < x ? 1/x : 0`.  For example, if you pass 0.01, then 99%\n   * of the time this function will return 0, and 1% of the time this function\n   * will return 100. So 99% of the time Apollo Server will not track field\n   * executions, and 1% of the time Apollo Server will track field executions\n   * and send them to Apollo Studio both as an exact observed count and as an\n   * \"estimated\" count which is 100 times higher.  Generally, the weights you\n   * return should be roughly the reciprocal of the probability that the\n   * function returns non-zero; however, you're welcome to craft a more\n   * sophisticated function, such as one that uses a higher probability for\n   * rarer operations and a lower probability for more common operations.\n   *\n   * (Note that returning true here does *not* mean that the data derived from\n   * field-level instrumentation must be transmitted to Apollo Studio's servers\n   * in the form of a trace; it may still be aggregated locally to statistics.\n   * But either way this operation will contribute to the \"field executions\"\n   * statistic and timing hints.)\n   *\n   * The default `fieldLevelInstrumentation` is a function that always returns\n   * true.\n   */\n  fieldLevelInstrumentation?:\n    | number\n    | ((\n        request: GraphQLRequestContextDidResolveOperation<TContext>,\n      ) => Promise<number | boolean>);\n\n  /**\n   * This option allows you to choose if a particular request should be\n   * represented in the usage reporting sent to Apollo servers. By default, all\n   * requests are included. If this async predicate function is specified, its\n   * return value will determine whether a given request is included.\n   *\n   * Note that returning false here means that the operation will be completely\n   * ignored by all Apollo Studio features. If you merely want to improve\n   * performance by skipping the field-level execution trace, set the\n   * `fieldLevelInstrumentation` option instead of this one.\n   *\n   * The predicate function receives the request context. If validation and\n   * parsing of the request succeeds, the function will receive the request\n   * context in the\n   * [`GraphQLRequestContextDidResolveOperation`](https://www.apollographql.com/docs/apollo-server/integrations/plugins/#didresolveoperation)\n   * phase, which permits tracing based on dynamic properties, e.g., HTTP\n   * headers or the `operationName` (when available). Otherwise it will receive\n   * the request context in the\n   * [`GraphQLRequestContextWillSendResponse`](https://www.apollographql.com/docs/apollo-server/integrations/plugins/#willsendresponse)\n   * phase:\n   *\n   * (If you don't want any usage reporting at all, don't use this option:\n   * instead, either avoid specifying an Apollo API key, or use\n   * ApolloServerPluginUsageReportingDisabled to prevent this plugin from being\n   * created by default.)\n   *\n   * **Example:**\n   *\n   * ```js\n   * includeRequest(requestContext) {\n   *   // Always include `query HomeQuery { ... }`.\n   *   if (requestContext.operationName === \"HomeQuery\") return true;\n   *\n   *   // Omit if the \"report-to-apollo\" header is set to \"false\".\n   *   if (requestContext.request.http?.headers?.get(\"report-to-apollo\") === \"false\") {\n   *     return false;\n   *   }\n   *\n   *   // Otherwise include.\n   *   return true;\n   * },\n   * ```\n   *\n   */\n  includeRequest?: (\n    request:\n      | GraphQLRequestContextDidResolveOperation<TContext>\n      | GraphQLRequestContextWillSendResponse<TContext>,\n  ) => Promise<boolean>;\n  /**\n   * By default, this plugin associates client information such as name\n   * and version with user requests based on HTTP headers starting with\n   * `apollographql-client-`. If you have another way of communicating\n   * client information to your server, tell the plugin how it works\n   * with this option.\n   */\n  generateClientInfo?: GenerateClientInfo<TContext>;\n  /**\n   * If you are using the `overrideReportedSchema` option to the schema\n   * reporting plugin (`ApolloServerPluginSchemaReporting`), you should\n   * pass the same value here as well, so that the schema ID associated\n   * with requests in this plugin's usage reports matches the schema\n   * ID that the other plugin reports.\n   */\n  overrideReportedSchema?: string;\n  /**\n   * Whether to include the entire document in the trace if the operation\n   * was a GraphQL parse or validation error (i.e. failed the GraphQL parse or\n   * validation phases). This will be included as a separate field on the trace\n   * and the operation name and signature will always be reported with a constant\n   * identifier. Whether the operation was a parse failure or a validation\n   * failure will be embedded within the stats report key itself.\n   */\n  sendUnexecutableOperationDocuments?: boolean;\n\n  /**\n   * This plugin sends information about operations to Apollo's servers in two\n   * forms: as detailed operation traces of single operations and as summarized\n   * statistics of many operations. Each individual operation is described in\n   * exactly one of those ways. This hook lets you select which operations are\n   * sent as traces and which are sent as statistics. The default is a heuristic\n   * that tries to send one trace for each rough duration bucket for each\n   * operation each minute, plus more if the operations have errors. (Note that\n   * Apollo's servers perform their own sampling on received traces; not all\n   * traces sent to Apollo's servers can be later retrieved via the trace UI.)\n   *\n   * This option is highly experimental and may change or be removed in future\n   * versions.\n   */\n  experimental_sendOperationAsTrace?: (\n    trace: Trace,\n    statsReportKey: string,\n  ) => boolean;\n  //#endregion\n\n  //#region Configure the mechanics of communicating with Apollo's servers.\n  /**\n   * Sends a usage report after every request. This options is useful for\n   * stateless environments like Amazon Lambda where processes handle only a\n   * small number of requests before terminating. It defaults to true when\n   * used with an ApolloServer subclass for a serverless framework (Amazon\n   * Lambda, Google Cloud Functions, or Azure Functions), or false otherwise.\n   * (Note that \"immediately\" does not mean synchronously with completing the\n   * response, but \"very soon\", such as after a setImmediate call.)\n   */\n  sendReportsImmediately?: boolean;\n  /**\n   * HTTP(s) agent to be used on the `fetch` call when sending reports to\n   * Apollo.\n   */\n  requestAgent?: RequestAgent | false;\n  /**\n   * Specifies which Fetch API implementation to use when sending usage reports.\n   */\n  fetcher?: typeof fetch;\n  /**\n   * How often to send reports to Apollo. We'll also send reports when the\n   * report gets big; see maxUncompressedReportSize.\n   */\n  reportIntervalMs?: number;\n  /**\n   * We send a report when the report size will become bigger than this size in\n   * bytes (default: 4MB).  (This is a rough limit --- we ignore the size of the\n   * report header and some other top level bytes. We just add up the lengths of\n   * the serialized traces and signatures.)\n   */\n  maxUncompressedReportSize?: number;\n  /**\n   * Reporting is retried with exponential backoff up to this many times\n   * (including the original request). Defaults to 5.\n   */\n  maxAttempts?: number;\n  /**\n   * Minimum back-off for retries. Defaults to 100ms.\n   */\n  minimumRetryDelayMs?: number;\n  /**\n   * Timeout for each individual attempt to send a report to Apollo. (This is\n   * for each HTTP POST, not for all potential retries.) Defaults to 30 seconds\n   * (30000ms).\n   */\n  requestTimeoutMs?: number;\n  /**\n   * A logger interface to be used for output and errors.  When not provided\n   * it will default to the server's own `logger` implementation and use\n   * `console` when that is not available.\n   */\n  logger?: Logger;\n  /**\n   * By default, if an error occurs when sending trace reports to Apollo\n   * servers, its message will be sent to the `error` method on the logger\n   * specified with the `logger` option to this plugin or to ApolloServer (or to\n   * `console.error` by default). Specify this function to process errors in a\n   * different way. (The difference between using this option and using a logger\n   * is that this option receives the actual Error object whereas `logger.error`\n   * only receives its message.)\n   */\n  reportErrorFunction?: (err: Error) => void;\n  //#endregion\n\n  //#region Internal and non-recommended options\n  /**\n   * The URL base that we send reports to (not including the path). This option\n   * only needs to be set for testing and Apollo-internal uses.\n   */\n  endpointUrl?: string;\n  /**\n   * If set, prints all reports as JSON when they are sent. (Note that for\n   * technical reasons, traces embedded in a report are printed separately when\n   * they are added to a report.)\n   */\n  debugPrintReports?: boolean;\n  /**\n   * Specify the function for creating a signature for a query. See signature.ts\n   * for details. This option is not recommended, as Apollo's servers make assumptions\n   * about how the signature relates to the operation you executed.\n   */\n  calculateSignature?: (ast: DocumentNode, operationName: string) => string;\n  /**\n   * This option includes extra data in reports that helps Apollo validate the\n   * stats generation code in this plugin. Do not set it; the only impact on\n   * your app will be a decrease in performance.\n   */\n  internal_includeTracesContributingToStats?: boolean;\n  //#endregion\n}\n\nexport type SendValuesBaseOptions =\n  | { onlyNames: Array<String> }\n  | { exceptNames: Array<String> }\n  | { all: true }\n  | { none: true };\n\ntype VariableValueTransformOptions = {\n  variables: Record<string, any>;\n  operationString?: string;\n};\n\nexport type VariableValueOptions =\n  | {\n      transform: (\n        options: VariableValueTransformOptions,\n      ) => Record<string, any>;\n    }\n  | SendValuesBaseOptions;\n\nexport interface ClientInfo {\n  clientName?: string;\n  clientVersion?: string;\n}\nexport type GenerateClientInfo<TContext> = (\n  requestContext: GraphQLRequestContext<TContext>,\n) => ClientInfo;\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}